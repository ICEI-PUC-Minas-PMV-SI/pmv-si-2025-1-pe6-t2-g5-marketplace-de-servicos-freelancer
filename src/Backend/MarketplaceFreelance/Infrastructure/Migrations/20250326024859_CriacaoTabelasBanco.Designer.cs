// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250326024859_CriacaoTabelasBanco")]
    partial class CriacaoTabelasBanco
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Contratante", b =>
                {
                    b.Property<long>("ContratanteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ContratanteId"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("Upvote")
                        .HasColumnType("integer");

                    b.HasKey("ContratanteId");

                    b.ToTable("Contratantes");
                });

            modelBuilder.Entity("Core.Models.Freelancer", b =>
                {
                    b.Property<long>("FreelancerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FreelancerId"));

                    b.Property<DateTime>("DataInativacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("Upvote")
                        .HasColumnType("integer");

                    b.HasKey("FreelancerId");

                    b.ToTable("Freelancers");
                });

            modelBuilder.Entity("Core.Models.Projeto", b =>
                {
                    b.Property<long>("ProjetoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ProjetoId"));

                    b.Property<long>("ContratanteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Escopo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ProjetoId");

                    b.HasIndex("ContratanteId");

                    b.ToTable("Projetos");
                });

            modelBuilder.Entity("Proposta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Aprovado")
                        .HasColumnType("boolean");

                    b.Property<long>("ContratanteId")
                        .HasColumnType("bigint");

                    b.Property<long>("FreelancerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjetoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContratanteId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("ProjetoId");

                    b.ToTable("Proposta");
                });

            modelBuilder.Entity("Core.Models.Projeto", b =>
                {
                    b.HasOne("Core.Models.Contratante", "Contratante")
                        .WithMany("Projetos")
                        .HasForeignKey("ContratanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contratante");
                });

            modelBuilder.Entity("Proposta", b =>
                {
                    b.HasOne("Core.Models.Contratante", "Contratante")
                        .WithMany()
                        .HasForeignKey("ContratanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Freelancer", "Freelancer")
                        .WithMany("Propostas")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Models.Projeto", "Projeto")
                        .WithMany("Propostas")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contratante");

                    b.Navigation("Freelancer");

                    b.Navigation("Projeto");
                });

            modelBuilder.Entity("Core.Models.Contratante", b =>
                {
                    b.Navigation("Projetos");
                });

            modelBuilder.Entity("Core.Models.Freelancer", b =>
                {
                    b.Navigation("Propostas");
                });

            modelBuilder.Entity("Core.Models.Projeto", b =>
                {
                    b.Navigation("Propostas");
                });
#pragma warning restore 612, 618
        }
    }
}
